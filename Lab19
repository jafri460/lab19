import java.awt.image.BufferedImage;
import java.awt.*;
import javax.swing.*;
import java.awt.event.*;

public class plantsVZombies extends JFrame implements KeyListener{
	
	private final int ROWS=8;
	private final int COLS=8;
	
	private JPanel pane= new JPanel(new GridLayout(ROWS,COLS,2,2));
	private JPanel[][] panel=new JPanel[8][8];//an array of 64 panels
	private Color color1=Color.GREEN;//one color of the checkerboard
	private Color color2=Color.green.darker();//alternative color on the checkerboard
	private Color tempColor;//temporary color for the for loop
	private JLabel label[][]=new JLabel[8][8];//array for the plants
	private JLabel zombiePrint[][]=new JLabel[8][8];//array for the zombies

	private int X=4;//original location of the peashooter which gets changed later
	private int Y=4;
	int numPressed=0;//if numpressed is 4 then display a zombie
	
	ImageIcon peashoot=new ImageIcon("/Users/asadjafri/Desktop/peaShooter.png");//gets the images from their location in the computer
	ImageIcon rock=new ImageIcon("/Users/asadjafri/Desktop/rock.png");
	ImageIcon sunflower=new ImageIcon("/Users/asadjafri/Desktop/sunflower.png");
	ImageIcon zombie=new ImageIcon("/Users/asadjafri/Desktop/zombie.png");
	
	Image transformed=peashoot.getImage().getScaledInstance(50, 50, java.awt.Image.SCALE_SMOOTH);//to resize the images
	Image transformed2=rock.getImage().getScaledInstance(77, 77, java.awt.Image.SCALE_SMOOTH);
	Image transformed3=sunflower.getImage().getScaledInstance(77, 77, java.awt.Image.SCALE_SMOOTH);
	Image transformed4=zombie.getImage().getScaledInstance(50, 50, java.awt.Image.SCALE_SMOOTH);

	//default constructor
	public plantsVZombies() {
		super("Plants VS Zombies");//displays on top of the frame
		setSize(600,600);//sets the default size of the frame
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//terminates the program if exed out
		setResizable(false);//the size stays at 600 by 600 and cannot be resized
		
		
		//adding the pane or the checkerboard to the content pane which defaults to the center
		add(pane);
		addKeyListener(this);//adding the keyListener to the default constructor
		pane.addKeyListener(this);
		
		//this for loop is to display a checkerboard or a grid like this Plants Vs Zombies one
		for(int x=0;x<ROWS;++x) {
			for(int y=0;y<COLS;++y) {
			panel[x][y]=new JPanel();//initialize individual panels
			label[x][y]=new JLabel();
			zombiePrint[x][y]=new JLabel();
			pane.add(panel[x][y]);//add the panel to the grid
			panel[x][y].add(label[x][y]);
			panel[x][y].add(zombiePrint[x][y]);//add the zombie array to the same pane as the plants
		
				if(x%2==0) {//even panels are set as the same color
				panel[x][y].setBackground(color1);
				}else {//odd panels are set as the alternative color
				panel[x][y].setBackground(color2);
				
			}
			
		}
		
		}
	}

	@Override
	public void keyTyped(KeyEvent e) {
		
	}

	@Override
	public void keyPressed(KeyEvent e) {
		int key = e.getKeyCode();
		System.out.println(key);
		
		
		if(key==KeyEvent.VK_UP) {
			
			if(X != 0) {//subtracts 1 from the x coordinate to move up
				label[X][Y].setIcon(null);//allow the array to be reset and set again				
				X-=1;
				numPressed++;
				label[X][Y].setIcon(new ImageIcon(transformed));
				if (numPressed%4==0){//checks to see if there have been 4 arrow key presses and if so will randomly display a zombie in the right two columns
					int randZombieCol=(int)(Math.random()*2)+6;//restricts the position to the last to columns
					int randZombieRow=(int)(Math.random()*8);//rows are not restricted for the zombies
					zombiePrint[randZombieRow][randZombieCol].setIcon(new ImageIcon(transformed4));
				}
			}else if(X<0) {//bounds checking and if so stays in the same place
				label[X][Y].setIcon(null);	
				X+=1;
				numPressed++;
				label[X][Y].setIcon(new ImageIcon(transformed));
				if (numPressed%4==0) {
					int randZombieCol=(int)(Math.random()*2)+6;
					int randZombieRow=(int)(Math.random()*8);
					zombiePrint[randZombieRow][randZombieCol].setIcon(new ImageIcon(transformed4));
				}
			}
		}else if(key==KeyEvent.VK_DOWN) {
			if(X <7) {//adds 1 to the x coordinate to move down
				label[X][Y].setIcon(null);				
				X+=1;
				numPressed++;
				label[X][Y].setIcon(new ImageIcon(transformed));	
				if (numPressed%4==0) {
					int randZombieCol=(int)(Math.random()*2)+6;
					int randZombieRow=(int)(Math.random()*8);
					zombiePrint[randZombieRow][randZombieCol].setIcon(new ImageIcon(transformed4));
				}
			}else if(X>7) {//bounds checking and if so stays in the same place
				label[X][Y].setIcon(null);	
				X-=1;
				numPressed++;
				label[X][Y].setIcon(new ImageIcon(transformed));
				if (numPressed%4==0) {
					int randZombieCol=(int)(Math.random()*2)+6;
					int randZombieRow=(int)(Math.random()*8);
					zombiePrint[randZombieRow][randZombieCol].setIcon(new ImageIcon(transformed4));
				}
			}
			
		}else if(key==KeyEvent.VK_RIGHT) {
			if(Y < 7) {//add 1 to the y coordinate to move right
				label[X][Y].setIcon(null);				
				Y+=1;
				numPressed++;
				label[X][Y].setIcon(new ImageIcon(transformed));	
				if (numPressed%4==0) {
					int randZombieCol=(int)(Math.random()*2)+6;
					int randZombieRow=(int)(Math.random()*8);
					zombiePrint[randZombieRow][randZombieCol].setIcon(new ImageIcon(transformed4));
				}
			}else if(Y>7) {//bounds checking and if so stays in the same place
				label[X][Y].setIcon(null);	
				Y-=1;
				numPressed++;
				label[X][Y].setIcon(new ImageIcon(transformed));//change the transformed
				if (numPressed%4==0) {
					int randZombieCol=(int)(Math.random()*2)+6;
					int randZombieRow=(int)(Math.random()*8);
					zombiePrint[randZombieRow][randZombieCol].setIcon(new ImageIcon(transformed4));
				}
			}
			
		}else if(key==KeyEvent.VK_LEFT) {
			if(Y != 0) {//subtracts 1 from the y coordinate to move left
				label[X][Y].setIcon(null);				
				Y-=1;
				numPressed++;
				label[X][Y].setIcon(new ImageIcon(transformed));	
				if (numPressed%4==0) {
					int randZombieCol=(int)(Math.random()*2)+6;
					int randZombieRow=(int)(Math.random()*8);
					zombiePrint[randZombieRow][randZombieCol].setIcon(new ImageIcon(transformed4));
				}
			}else if(Y<0) {//bounds checking and if so stays in the same place
				label[X][Y].setIcon(null);	
				Y+=1;
				numPressed++;
				label[X][Y].setIcon(new ImageIcon(transformed));
					if (numPressed%4==0) {
						int randZombieCol=(int)(Math.random()*2)+6;
						int randZombieRow=(int)(Math.random()*8);
						zombiePrint[randZombieRow][randZombieCol].setIcon(new ImageIcon(transformed4));
					}
				}
			
	

		}else if(key==KeyEvent.VK_SPACE) {
			
			int randPlant=(int)(Math.random()*3)+1;//every time the spacebar is pressed it will set the previous index to a random plant
			if(randPlant==1) {
				label[X-1][Y].setIcon(new ImageIcon(transformed));
			}else if(randPlant==2) {
				label[X-1][Y].setIcon(new ImageIcon(transformed2));
			}else if(randPlant==3) {
				label[X-1][Y].setIcon(new ImageIcon(transformed3));
			}
			//when moving the index behind gets set to the plant that was initially moving around
			
		}
	}


	@Override
	public void keyReleased(KeyEvent e) {
		return;
	}
	//main
	public static void main(String[] args) {
		plantsVZombies frame=new plantsVZombies();
		frame.setVisible(true);
	}
}
